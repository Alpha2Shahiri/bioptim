name: Run the tests

on: [pull_request]

env:
  PREFIX_LINUX: /usr/share/miniconda3/envs/bioptim
  PREFIX_MACOS: /Users/runner/miniconda3/envs/bioptim
  PREFIX_WINDOWS: C:\Miniconda3\envs\bioptim

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] #, macos-latest, windows-latest]
        shard: [5, 6] #,[1, 2, 3, 4]
    name: Tests on ${{ matrix.os }}-shard ${{ matrix.shard }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Set prefix Linux
        run: |
            echo "PREFIX=${{ env.PREFIX_LINUX }}" >> $GITHUB_ENV
        if: matrix.os == 'ubuntu-latest'

      - name: Set prefix osx
        run: |
          echo "PREFIX=${{ env.PREFIX_macOS }}" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest'

      - name: Set prefix windows
        run: |
          echo "PREFIX=${{ env.PREFIX_WINDOWS }}" >> $GITHUB_ENV
        if: matrix.os == 'windows-latest'
      
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: bioptim
          environment-file: environment.yml

      - name: Print mamba info
        run: | 
          mamba config --show
          mamba info
          mamba list

      - name: Install extra dependencies
        run: mamba install pytest-cov black pytest pytest-cov codecov packaging -cconda-forge

      - name: Install ACADOS on Linux
        run: |
          pwd
          cd external
          ./acados_install_linux.sh 1 ${{ env.PREFIX_LINUX }}
          cd ..
        if: matrix.os == 'ubuntu-latest'

      - name: Install ACADOS on Mac
        run: |
          pwd
          cd external
          ./acados_install_mac.sh 1 ${{ env.PREFIX_MACOS }}
          cd ..
        if: matrix.os == 'macos-latest'

      - name: Run tests
        #run: pytest -v --color=yes --cov-report term-missing --cov=bioptim tests/shard${{ matrix.shard }}
        #run: pytest -v --color=yes --cov-report term-missing --cov=bioptim --cov-config=.coveragerc --cov-report=xml:coverage.xml tests/shard${{ matrix.shard }}
        run:  pytest -v --color=yes  --cov-config=.coveragerc --cov-report=xml:coverage.xml tests/shard${{ matrix.shard }}


      - name: Test installed version of bioptim
        run: | 
          python setup.py install
          cd
          python -c "import bioptim"

      - name: Generate coverage report
        run: coverage report -m

      - name: Archive coverage report
        id: archive
        uses: actions/upload-artifact@v3
        with:
          name: coverage${{ matrix.shard }}
          path: coverage.xml

      - name: 'Echo upload path'
        run: echo ${{steps.archive.outputs.path}}


  merge-coverage:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Download all workflow run artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          path: coverage.xml

      - name: 'Echo download path'
        run: echo ${{steps.download.outputs.download-path}}

      - name: Install extra dependencies
        run: |
          sudo apt-get install -y python3-pip
          pip3 install coverage

      - name: Move coverage reports to current directory
        run: find . -name '.coverage.*' -exec mv {} . \;

      - name: Merge coverage reports
        run: coverage combine

      - name: Generate XML report
        run: coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true # optional (default = false)


